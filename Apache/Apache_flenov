Apache 
														_Глава 7 веб-сервер_
														_htaccess_
														_mod_security_
														_защита xss sql инъекций_
														_robots.txt_


_Глава 7 веб-сервер_
Apache
/etc/httpd/conf/httpd.conf    #конфигурационный файл
/etc/httpd.conf
/etc/apache2

Установка
1  sudo apt install apache2 		# ubuntu
2  yum install httpd      			# centos

3 ls /etc/apache2/apache2.conf
1 ServerRoot     ## корневой каталог в котором находятся файлы конфигурации и журналы
2 Timeout        ## предельное время ожидания в секундах для получения и отправки пакетов

3 HostnameLookups ## флаг, отвечающий за проведение преобразования ip-адресов в доменное имена для логов CGI. Если on то ip-адрес клиента
запросившего данные с сервера будет преобразован в доменное имя иначае будет использ. ip-адрес. Если в этом нет необходимости лучше off
так быстрее.

4 User и Group
имя пользователя и группа с правами которых будет работать сервис. Как правило пользователь и группа www-data.
Пользователь и группа должны обладать минимальными правами для работы сервера.

В файле apache.conf # представлены в виде переменных:
User $(APACHE_RUN_USER)
Group $(APACHE_RUN_GROUP)

Значение переменных можно найти в /etc/apache2/envars:
export APACHE_RUN_USER=www-data
export APACHE_RUN_GROUP=www-data

5 ErrorLog Customlog        # местоположение журналов. Опять же здесь вы увидите переменную $(APACHE_LOG_DIR), которую так же можно задать
в файле переменных окружения

6 LogLevel # степень подробности составления журнала. Можно указать следующие значения:
emerg,alert,crit,error, warn,notice, info, debug;

7 KeepAlive !!!!!!!!!!!!! #разрешает обрабатывать несколько запросов за одно соединение. По умолчанию off !!!!!, что не очень и для получения в таком случае файла требуется отдельное соединение. Пример клиент запросил страницу с 10 картинками тогда будет 11 соединений. 
Одна html и 10 для картинок документа. Если включить on, то тогда за одно подключение будет обработано несколько подключений.

8 MaxKeepAliveRequests # максимальное число запросов, которое может быть выполнено в течение одного соединения.

9 KeepAliveTimeout      # время ожидания  очередного запроса, которое может быть выполнено в течение одного соединения

10  Безопасность 
/etc/apache2/conf-enabled/security.conf:

ServerTokens - при любом обращении к серверу он возвращает подробный заголовок с подробной инфой о системе, которая включает версии
Apache, ОС linux и модулей , устаревшая версия интерпертатора PHP. Болтливые параметры надо отключать.

Full  # отображать полную информацию о сервере и установленных модулях включая их версии. Самое опасное значение.

Min   # показать минимум сведений только название сервера и установленные модули. Тоже не очень.

ProductOnly # только название сервера вот  это значение самое лучшие.


ServerSignature #  если on то тогда будет добавлять сгенирированные страницы текстовую информацию которая будет содержать имя сервера
и виртуального хоста. В рабочих системах лучше отключать это установив параметр в off.

=======================================================================================
_htaccess_
7.2. Модули 
1 ls /etc/apache2/mods-enabled    # смотрю все модули, которые были установлены, неиспользуемые модули отключать или не устанавливать
чтобы снизить риски. Лишния программа это дверь.

2 Модуль не загружается rewrite
sudo a2enmod rewrite  # a2enmod программа которая помогает включать модули здесь именно rewrite

3 /etc/apache2/mods-enabled  # и убедитесь что вы видите там файл rewrite.load

4 /etc/apache2/mods-enabled   # все активированные и неактивированные модули можно здесь посмотреть

5 sudo /etc/init.d/apache2 restart #надо перезагрузить Apache после включения модуля для вступления изменений в силу.
==============================================================================

7.3. Права доступа
/etc/apache2/apache2.conf 
<Directory /var/www/html>       # правада доступа к каталогу /html ограничивает открыл
	Order allow,deny
	Allow from all
</Directory>					# закрыл

## также права доступа могут  быть описаны в файле .htaccess


<Location /server-status>         # ограничивает доступ к виртуальному каталогу разрешая его только клиентам
	SetHandler server-status	  # из домена .your-domain.com 
	Order deny,allow
	Deny from all
	Alow From .your-domain.com
</Location>


2 <Directory />
	Order deny,allow
	Deny from all
  </Directory>

1 Allow from параметр  # оперделяет с каих хостов можно получить доступ к указанному каталогу 
all     # разрешает доступ к каталогу всем
доменное имя  #  опредеояет домен, с которого можно получить доступ к каталогу. Например можно указать domain.com, если есть важные файлы
то можно ограничить доступ своим доменом или только локальной машиной указав Allow from localhost

2 IP адрес     ## сужает доступ к каталогу до определенного IP-адреса.

env=Имя Переменной  ## разрешает доступ, если определена указанная переменная окружения. Полный формат директивы
Allow from env= Имя переменной

3 Deny from параметр    # запрещени доступа к указанному каталогу from

Order параметр     # очередность в которой применяются директивы allow и deny

 Могут быть два варианта:
 Order deny,allow    # изначально разрешено всем, потом проверяются запреты.

 Require параметр    # позволяет задать пользователей которым разрешен доступ к каталогу. В качестве параметра можно указывать:

 user  # имена пользователей которым разрешен доступ к каталогу. Например Require user robert FlenovM

 group   # названия групп, пользователям которых позволен доступ к каталогу. Директива работает так же как user 

 valid-user # доступ к каталогу разрешен любому аутентифицированному пользователю

4 Satisfy параметр  # если указать значение any, то для ограничения доступа использовать логин и пароль или Ip-адрес. Для идентификации
пользователя по двум условия одновременно задать all

5 AllowOverride параметр # определяет какие директивы из файла .htaccess  в указанном каталоге могут перекрывать конфигруацию сервера. В качестве параметр можно указать одно из следующих значений: None, All Authconfig Fileinfo Indexes Limit Options

6 Options параметры определяет возможности веб-сервера, которые доступны в указанному каталоге 
All # означает разрешение всех опций кроме MultiViews, None # запрещает все опции или комбинация из следующих значений:

ExecCGI # разрешено выполнение CGI сценариев, чаще всего используется отдельный каталог /cgi-bin но и в нем можно определить отдельные 
подкаталоги в которых запрещено выполение 


FollowSymlinks    # позволяет использовать символьные ссылки. Символьные ссылки очень опасны с ними надо быть аккуратнее.

SymlinksIfOwnerMatch # следовать по символьным ссылкам, только если владельцы целевого файлы и ссылки совпадают. Лучше его использщвать вместо FollowSymlinks, потому что если получится создать символьную ссылку на /etc/ будут серьезные проблемы.

7 Includes     #использовать SSI  включения на стороне сервера

8 IncludesNOEXEC  # использовать SSI кроме команд exec include 

9 Indexes   # отобразить список содержимого каталога  если отсутствует файл по умолчанию 
здесь указывается какой файл нужен для загрузки сайта index.htm, index.html, index.asp  или index.php

10 MultiViews # представление зависит от предпочтений клиента


11 <Files ИмяФайла>  # объявление для 
</Files>

Пример:
<Directory /var/www/html>
	Order allow,deny
	Allow from all
	<Files "/var/www/html/admin.php">
		Deny from all
	</Files>
</Directory>


12 Помимо файлов и каталогов можно ограничивать и методы протокола HTTP такие как GET, POST, PUT, DELETE,  CONNECT, OPTIONS, TRACE, PATCH,
PROPFIND, PROPPATCH, MKCOL, COPY, MOVE, LOCK, UNLOCK

Пример:

<Directory /home>	
	<Limit GET POST>
		Deny from all
	</Limit>
</Directory>
=============================================================================================
7.4. Создание виртуальных веб-серверов 235 
1 /etc/apache2/sites-available   # веб сайты описываются в каталоге
/etc/hosts  
127.0.0.1  testsite.com # проверка с компьютера на котором сейчас работаешь

2 echo 127.0.0.1 testsite.com | sudo tee -a /etc/hosts   # записываю от sudo , tee запись в файл, -a в конец файла 

3 Создание виртуального хоста
/etc/apache2/sites-available/testsite.com

<VirtualHost 192.168.1.1:80>
	ServerAdmin admin@your_server.com       # почта куда будет отсылаться уведомление об ошибках
	DocumentRoot /var/www/your_server.com   # каталог в котором расположен корневой каталог сайта
	ServerName your_server.com              # имя сервера. Если оно не указано, то используется локальный ip-адрес сервера
	ErrorLog logs/your_server.com -error.log
	CustomLog logs/your_server.com -access_log common

	<Directory /var/www/your_server/> 		# здесь указываем права доступа, здесь указан корневой каталог 
		AllowOverride none
	</Directory>
</Virtualhost>

4 Директивы которые также можно указывать в файле в htaccess 
AuthTupe параметр   # тип аутентификации. В качестве параметра можно использовать одно из значений Basic или Digest 

AuthGroupFile параметр # файл в котором хранится список групп пользователей

AuthUserFile параметр  # файл содержаший имена пользователей и пароли. Этот списо лучше формировать утилитой htpasswd

AuthAuthoritative параметр # способ проверки прав. По умолчанию включена on. Если выключена off а пользователь не указал имя то его аутентификация осуществляется другими модулями например по ip-адресу;

AuthDBMGroupFile AuthDBMUserFile  # аналогичны  AuthGroupFile AuthUserFile


Если нужно настроить чтобы доступ к каталогу был отлько у авторизованного пользователя тогда директива:
Require valid-user  # тогда при запросе это каталога попроситя указать имя пользователя 
=====================================================
7.5.1 Файлы .htaccess
Если есть каталог в котором должны быть какие либо права то лучше создать файл .htaccess в этом каталоге. 
1 Пример:

AuthType Basic                  # тип базовый 
Authname "By Invitation Only"   # при попытки подключения к wp-admin (пример) появиться окно с таким названием
AuthUserFile /pub/home/flenov/passwd  # задает файл в котором хранится инфа о пользователе и пароле 
Require valid-user 					# это значит что файл могут открыть только пользователь который прошел аунтификацию

2 Также можно настроить доступ к каталогу только с определнного Ip-адреса, то в файле .htaccess может содержаться следующая строка:
Allow from 101.12.41.148


3 Эти же параметры можно указывать и в файле httpd.conf, например:
<directory /var/www/flenov/secret>
AuthType Basic
AuthName "By Invitation Only"
AuthUserFile /pub/home/flenov/passwd
Require valid-user
</directory>

4 можно править и так и так через httpd.conf  дает преимущества, так как он находится в каталоге /etc, который не входит в корень веб сервера и должен быть запрещен для просмотра пользователям
===============================================================================
Файлы паролей 
1 
AuthType Basic                  # тип базовый 
Authname "By Invitation Only"   # при попытки подключения к wp-admin (пример) появиться окно с таким названием
AuthUserFile /pub/home/flenov/passwd  # задает файл в котором хранится инфа о пользователе и пароле 
Require valid-user 			    #  это значит что файл могут открыть только пользователь который прошел аунтификацию

AuthUserFile /pub/home/flenov/passwd # текстовый файл типо 
flenov:{SHA} bla bla bla bla 

2 htpasswd ключ файл_имя пароль # команда для задачи пароля

Пример:
httpasswd -c mypasswd robert  # -c создать новый файл, если есть файл то он перезаписывается, старое содежимое терятется. 
# будет создан файл mypasswd, содержаший одну запись для пользователя robert с указанным вами паролем

-m # этот алгоритм можно использовать в разных операционных системах

-d # применить системную функцию crypt() для шифрования;

-s  # применить SHA-шифрование

-p  # не шифровать пароли просто задавать но это небезопасно

-n  # не вносить никаких изменений, а только вывести результат на экран 


3 можно сделать так
htpasswd .htaccess Rybkin  # можно задать и так пользователя и пароль в командной строке !!!!!! помни history -r

4 http позволяет перехватывать пакеты где есть имя пользователя и пароль, https позволяет зашифровать ваш трафик и сделать его недоступным

================================================================================================================
Обработка на сервере в файле httpd.conf:

AddHandler cgi-script .cgi  # если perl не использую то коменчу
AddHandler server-parsed .shtml  # сама по себе безобидна 

AddHandler server-parsed .html  # таких строк не должно быть 
Если нужно в каких-то каталогах то там можно созадть файл .htaccess с вышеуказанной записью

В остальных каталогах в файле .htaccess должна быть следующая запись или в httpd.conf:
RemoveHandler .html .htm

<!-- #include virtual="filename.shtml" --> # то данный код выполниться в shtml-файле 

Если SSI не используется соотвественно SHTML-файлы то закоментируйте следующую строку:
AddHandler server-parsed .shtml     
==========================================================
7.6 Советы по настройке apache
1 для удобства права доступа можно указать в файле htaccess.
2 комментируй все действия чтобы потом если что можно было вспомнить
3 желательно настраивать используя регулярные выражения пример:

<Directory /home/* >         # сразу для папки home создалал такие правила также можно для /home/*/public_html для всех public_html
	AllowOverride FileInfo AuthConfig Limit
	Options MultiViews Indexes SymlinksIfOwnerMatch IncludesNoExec
	<Limit GET POST OPTIONS PROPFIND>
		Order allow,deny
		Allow from all
	</Limit>
	<LimitExcept GET POST OPTIONS PROPFIND>
		Order deny,allow
		Deny from all
	<LimitExcept>
</Directory>
=========================================================
7.7 Безопасность сценариев 
1 Параметр safe_mode и magic_quotes в настройках сервера.
magic_quotes
safe mode

Все настройки для интерпретатора php хранятся в файле /etc/php.ini.

2 Причина взлома устаревшие модули, устаревшая cms и так далее, на сайте имеются не безопасные сценарии с помощью которых можно получить доступ к серверу и запустить комаду. Многое зависит от того как как написан сценарий программистом.
===========================================================
7.7.2 Модуль _mod_security_
1 mod_security # модуль apache 
mod_security это сетевой экран, который анализирует пускать ли пакет на сервер или нет. Если в пакете идет обращение к определенному url то норм, но если идет обращение к файлу /etc/passwd, а значит его не должно быть в пакете.

2 Модуль mod_security скачиваем с сайта www.modsecurity.org. После его установки в файле httpd.conf появляется возможность  применять дополнительные директивы фильтрации запросов. Рассмотрим наиболее интересные из них:

httpd.conf (mod_sec)

1 SecFilterEngine On 					# включить режим фильтрации запросов

2 SecFilterCheckURLEncoding On 		# проверить кодировку URL

3 SecFilterForceByteRange 32 126      # символы менее 32 и более 126 объявляются недопустимыми для адреса и такие пакеты не пропускаются к веб-серверу.

4 SecAuditLog logs/audit_log  		# определяет файл журнала, в котором будт сохраняться информация об аудите ло где хранится инфа c modsec

5 SecFilterDefaultAction "deny,log,status:406"  # задает действия по умолчанию. Здесь указан запрет(deny)

6 SecFilter xxx redirect:http//www.webkreator.com   ## настройка переадресации будет редиректить www.webkreator.com

7 SecFilter yyy log,exec:/home/apache/report-attack.pl  ## если фильтр сработал то будте выполнен скрипт /home/apache/report-attack.pl; 

8 SecFilter /etc/passwd        ##устанавливает запрет на использование в запросе пользователя подстроки /etc/passwd
  SecFilter /etc/shadow        # тоже добавь

9 SecFilter /bin/ls   # если в сценарии есть ошибка то это непозволит ввести со стороны данную команду 
Таже по аналогии надо настроить для команд cat rm cp ftp и др.

10 SecFilter "\.\./"  # класическая атака когда URL указывается две точки подряд для перехода в родительский каталог.Их там быть не должно;
####################################################################
modsec = httpd.conf 
_защита xss sql инъекций_
!!!!!!!!Защита от sql инъекций !!!!!!!!!!
11 SecFilter "delete[[:space:]]+from"       # запрет тескта delete .... from,который чаще всего содержится в SQL-запросах для удаления данных. 

12 SecFilter "insert[[:space:]]+from"       # используется в SQL-запросах для чтения данных из таблицы базы данных

13 SecFilter "select.+from"                 # используется в SQL запросах для чтения данных из таблицы базы данных

!!!!!!!!Защита от xss инъекций !!!!!!!!!!
14 SecFilter "<(.|\n)+>" и SecFilter "<[[:space:]]*script"  # позволяет защититься от xss-атак Cross-Site Scripting межсайтовое выполение сценариев
=========================================================
7.7.3 Советы допзащита
1 Ограничение выполнение сценариев только отдельным каталогом.

2 резервные копии плохая практика когда клиент хранит копию там же где и сайт злоумышленник может получить доступ к исходному коду 
bak old файлы с таким названием. Запрещаю доступ веб-клиентов пользователям доступ к таким файлам 

<FilesMatch "\.bak$">
	Order deny, allow
	Deny from all
<FilesMatch>

<FilesMatch "\.old">
	Order deny,allow
	Deny from all
<FilesMatch>
=========================================================
7.8 Индексация веб-страниц
_robots.txt_
1 google может по ошибке просканировать страницу которая закрытая или с ограниченным доступом злоумышленник может попробовать получить доступ к данной странице 
Пример если в посиске ввести следующие:

Годовой отчет filetype:doc
или
Годовой отчет filetype:xls
2 Если google может добраться то и человек тоже 

3 Чтобы ограничить доступ ложится файл robots.txt в корень папки с файлами сайта и робот прежде чем проиндексировать сайт смотрит в robots.txt
пример:
www.linux.fo.by/robots.txt

1 UserAgent: параметр в которой указывается имя поисковой системы. Если запреты должны действовать на все поисковики то достаточно указать в начале файла директиву User-Agent c параметром звездочка (*)

2 Disallow: адрес здесь указываем что именно запретить доступ как какой части сайта

1
UserAgent: *                  # для всех запритить доступ к ледующим страницам
Disallow: /cgi-bin/
Disallow: /admin/            # www.linux.of.by/admin надо просто через слеш указать к какой странице доступ закрыт

2 Полностью закрываю индексацию для всего сайта:
UserAgent: *
Disallow: /

С одной стороны robots.txt закроет старницы которые нужно скрыть, с другой стороны из-за того что robots.txt в открытом доступе может подсказать куда копать и куда смотреть. Лучший способ ничего не хранить важного на открытых серверах.
==========================================================
7.9. Безопасность подключения 
Раньше засщет отравления dns или подделки dns(ложный dns ответ) злоумышленник мог направить трафика на свой комп, потом уже на реальный сервер. В трафике может увидеть пароли номер карточки. Вот почему очень важен ssl сертфификат весь трафик защищен(зашифрован) и доступ получить к нему практически невозможно.

Поэтому всегда смотри есть сертификат или нету также обращай внимание, на соедениение безопасное или нет. Вводить карточку можно только там где есть сертификат https, для избежания перехвата трафика злоумышленником










 Apache
1 Менеджер пакетов Synaptic
2 /var/www/html
3 test.php ## запуск домен/test
<?php
phpinfo();
?> ### проверка php
3 конфигурационные директори
etc/apache2 ## ubuntu debian
apache2.conf
etc/httpd ### red hat семейства
httpd2.conf
4 файле apache2.conf
ServerName название домена
5 ports.conf ### порты
ServerRoot ### каталог конфигов сервера
DocumentRoot #### место корневой директории сайта
ErrorLog файл ###задает журнал
ErrorDocument N файл ### файл где инфа об ошибке
6 управление web сервером
sudo service httpd start  ## или apache2
sudo service httpd restart ### ## или apache2
sudo service httpd stop ### ## или apache2
7
apache2.conf
Maxclients ### максимальное количество клиентов
StartSer