nginx-server 
https://www.dmosk.ru/miniinstruktions.php?mini=nginx-redirects#http-https
настройка редиректов 
https://losst.ru/ustanovka-nginx-v-centos-7



													_Установка mainline nginx_ 
													_Структура nginx.conf_
												    _curl_
													_Задание 1_

                          _NGX-02: Настройка Locations в nginx_


1 используется для более экономного расходование ресурсов сервера используется в связке с apache 

виды использования nginx:
1 stand alone на разных ip-адресах и портах nginx apache
2 apache скрипты, nginx статика 
3 nginx + fastcgi  # fastcgi скрипты написаны на языке который понимает fastcgi (php, perl как пример) apache не нужен



################################################################
Итого:
1 netstat -nlp | grep :9000   # смотрю что слушает порт 9000 вижу php-cgi

2   nginx -t  ##проверка на синатксис

/etc/init.d/nginx restart  ## перестартую сервер nginx в момент рестарт если кто-то подключится может увидеть ошибку
/etc/init.d/nginx reload   ### reload создает перезагруку создаются новые воркеры которые обрабатывают запросы, а старые убиваются
systemctl reload nginx # аналог  reload лучше 

 
 nginx -t  ##проверка на синатксис 
  
  _telnet_
4 telnet sam.linux.of.by 80 
GET /index.html HTTP/1.0     ## два раза enter  делаю запрос через командуню строку смотрю ответ

4.2 telnet sam.linux.of.by 80

GET /index.html HTTP/1.1     # здесь уже другая версия протокола 
Host: sam.linux.of.by        # обязательно надо указать к какому виртуальному хосту надо подключиться

4.3 telnet sam.linux.of.by 80  ## тут неважно какой из доменов расположенных на сервере указывается

GET /index.html HTTP/1.1
Host: web.kis.im               # здесь указываю к какому реально виртуальному хосту необходимо обратиться 

WEB


5 curl # cat url расшифровка 

6 mv default.conf sam.linux.of.by.conf # виртуальные хосты необходимо переименовывать в название сайтов который описан в них 
cp sam.linux.of.by.conf web.kis.im.conf # создал копию виртуального хоста для второго домена  
	
7  _curl_
curl -v gamma.17f2998bb08b389725208b2a43cf72f6.kis.im:8080    #обращение к конкретному порту
curl -v http://sam.linux.of.by     # покажет большие логирование сначало от нас запрос потом ответ сервера 
curl -v -s -D - -H 'Host: sam.linux.of.by'  http://sam.linux.of.by/  # задаю свой хост
curl -s -D -  http://sam.linux.of.by/     # смотрим заголовки сервера 
curl -D - -o /dev/null http://sam.linux.of.by/   # если много информациии то можно так
!curl -s -D - -o /dev/null http://sam.linux.of.by/ # -s silent убрали пораметры скорости загрузки, -D dump headers -o output /dev/null !!!   # когда многи инфы а нам надо чисто заголовки 
curl -D - http://sam.linux.of.by/     # -D dump headers после второго дефиса - ничего не указано значит вывод в терминал будет 

8 Местоположение файлов виртуального хоста
/etc/nginx/sites-available ### Местоположение файлов виртуального хостов вся инфа о наших сайтов все что есть
/etc/nginx/sites-enabled ### чтобы активировать конфигурационный файл необходимо сделать символическую ссылку все что отдается

2 sudo ln -s /etc/nginx/sites-available/example.com /etc/nginx/sites-enabled/example.com ## активирую виртуальный хост конкретного домена example.com
3 Если я нахожусь в папке  /etc/nginx/sites-enabled то тогда:
cd /etc/nginx/sites-enabled
sudo ln -s /etc/nginx/sites-available/example.com

#################################################################


==========================================

10 _Структура nginx.conf_
1 user nginx;      # от какого пользователя запускается nginx 
  worker_processes auto   # 

2 error_log /var/log/nginx/error.log;   # где логи храним

3 worker_connections 1024;     количество соединений 

4 include /usr/share/nginx/modules/*.conf; # подключаем конкретны файл 

5 access_log  /var/log/nginx/access.log # где журналы храним


6 Если вы уже выполняли эту операцию, удалите своп-файл ".nginx.conf.swp"
=====================================================================================================
1 nginx.conf 

1 main # базовые директивы конфига 
Пример:
### Секция main
user www-data;
worker_processes auto;      # рекомендуют устанавливать по количеству ядер выставлят каждому worker свое ядро 
pid /run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;

2 events # какую библиотеку подключать 
events {
	worker_connections 768;
	# multi_accept on;
}

3 mail # прокисрование почтовых протоколов

4 http     #  MIME types, sendfile и другие
http {
	sendfile on;
	tcp_nopush on;
	tcp_nodelay on;
	keepalive_timeout 65;
	types_hash_max_size 2048;
	include /etc/nginx/mime.types;
	default_type application/octet-stream;
	ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE
	ssl_prefer_server_ciphers on;
	access_log /var/log/nginx/access.log;
	error_log /var/log/nginx/error.log;
	gzip on;

5 server     # это виртуальные хосты название домена и так далее 
    server {
      listen 80;

      server_name example.com;

      location / {
        return 200;

 6 client_max_body_size  # говорит о том, что какого размера запросы может отправлять клиент на сервере.
 значения могут быть примеры:
 128m
 4096k
 1024
 0 
 # указывается в виртуальном хосте и в конфиге тоже
Синтаксис:	client_max_body_size размер;
Умолчание:	
client_max_body_size 1m;
 client_max_body_size 50m;
Контекст:	http, server, location
https://nginx.org/ru/docs/http/ngx_http_core_module.html#client_max_body_size


 
 7 server  # это виртальный хост

 8 server_name  название домена 
 server_name example.com www.example.com;
 server_name example.com; # можно и так 
 server_name "";

9 listen какой порт слушает сервер так же можно указать ip-адреса сервера.
Примеры:
listen 80;         # просто порт 
listen 127.0.0.1:80 default_server; # тут уже указываем ip-адрес

10 return вернуть
return 200 "hello from nginx"; - вернет соответствующий текст с кодом 200;
return 301 http://example.com; - редирект на конкретную страницу 
также можно настроить редирект с http на https 
#########################################################################################################


11 http 1.1. протокол
Пример имитация браузера ввожу yandex.ru 

1 host yandex.ru
87.250.250.242
2 telnet 87.250.250.242 80  #браузер подключается на 80 порт 
GET /index.html HTTP/1.0
X-Api-Token:123 

# два раза enter 

HTTP/1.1 406 Not acceptable    # сервер не принял ответ 
Content-Length: 0 			   # никакого контента не было передано 	
# методы могут быть разные PUT POST DELETE OPTIONS HEAD

2 Попытка номер 2 
1 host yandex.ru
87.250.250.242

2 telnet 87.250.250.242 80
GET /index.html HTTP/1.1
Host: yandex.ru
X-Api-Token:123 


Вернет нам ответ получили страничку:
HTTP/1.1 302 Moved Temporarily
Content-Length: 154
Content-Type: text/html
Date: Sat, 30 Jan 2021 14:47:18 GMT
Location: http://yandex.ru/
X-Content-Type-Options: nosniff
set-cookie: is_gdpr=0; Path=/; Domain=.yandex.ru; Expires=Mon, 30 Jan 2023 14:47:18 GMT
set-cookie: is_gdpr_b=CLLbGBD5GigC; Path=/; Domain=.yandex.ru; Expires=Mon, 30 Jan 2023 14:47:18 GMT

<html>
<head><title>302 Found</title></head>
<body bgcolor="white">
<center><h1>302 Found</h1></center>
<hr><center>nginx</center>
</body>
</html>
##############################################################################################################

3  1xx продолжение получения запросов
   2хх успех
   3хх  редирект какой -то # в ответе от сервера будет Location: http://yandex.ru/ # куда редиректит 
   4хх  # клиент ошибся, 406 неприменимо на стороне клиент
   5хх  ошибка на стороне сервера 

4 что отдает браузер network = нажми запрос = headers 

Request URL: https://ya.ru/
Request Method: GET
Status Code: 200 Ok
Remote Address: 87.250.250.242:443

Cache-Control: no-cache,no-store,max-age=0,must-revalidate # что здесь сделать с кэшем на этой странице 
Content-Encoding: gzip 			 # все сжимается 

User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36  # какой user-agent использовался с какого браузера подключались 

viewport-width: 1536

5 HTTP/1.1    # в рамках одного соединения несколько запросов 
  HTTP/1.0     # одно соединение один запрос 
  HTTP/2.0      # сжатие headerov, server push от сервера могут идти доп картинки так они могут быть нужны 

#############################################################################################################
 лучше nginx устанавливать из его официального репозитория там по новее 

1 _Установка mainline nginx_  # последние релизы и все про тестированы лучше всего 
  stable # cстабильная версия 

2  nginx apt rep # в поиск 
в разделе ubuntu # 
https://nginx.org/ru/linux_packages.html

1 echo "deb http://nginx.org/packages/mainline/ubuntu `lsb_release -cs` nginx" \
    | sudo tee /etc/apt/sources.list.d/nginx.list

2 curl -fsSL https://nginx.org/keys/nginx_signing.key | sudo apt-key add -

3 sudo apt-key fingerprint ABF5BD827BD9BF62

4 sudo apt update
sudo apt install nginx 


3 apt-cache show nginx | head # смотрю версию nginx 
Package: nginx
Version: 1.19.6-1~focal


4 Структура 
la -lah /etc/nginx  
drwxr-xr-x  2 root root 4096 Jan 30 18:33 conf.d/
-rw-r--r--  1 root root 1007 Dec 15 16:59 fastcgi_params
-rw-r--r--  1 root root 2837 Dec 15 16:59 koi-utf
-rw-r--r--  1 root root 2223 Dec 15 16:59 koi-win
-rw-r--r--  1 root root 5231 Dec 15 16:59 mime.types
lrwxrwxrwx  1 root root   22 Dec 15 16:59 modules -> /usr/lib/nginx/modules/
-rw-r--r--  1 root root  643 Dec 15 16:59 nginx.conf
-rw-r--r--  1 root root  636 Dec 15 16:59 scgi_params
-rw-r--r--  1 root root  664 Dec 15 16:59 uwsgi_params
-rw-r--r--  1 root root 3610 Dec 15 16:59 win-utf

Если использовать package manager дистрибутива то тогда будет  /etc/nginx/sites-available и /etc/nginx/sites-enabled. Что по сути тоже самое что и выше.
В этом варианте, конфигурационный файл хранится в каталоге sites-available, а в каталоге sites-enabled создается симлинк на него, что позволяет при необходимости подключать/отключать часть конфигурации без удаления самого файла (путем добавления/удаления симлинка на него).

5 include       /etc/nginx/mime.types 
vim  /etc/nginx/mime.types  # какие расширения файлов которому соотвествуют 

6    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

Здесь указан формат логов как его можно настраивать 

7 include /etc/nginx/conf.d/*.conf;   # типо как было с симлинками avaible enable 
все конфиги размещаем здесь здесь находятся наши виртуальные хосты 

8 cd  /etc/nginx/conf.d
vim default.conf  # полностью все очищаю и начинаю заново

server {
  listen 80;

  server_name sam.linux.of.by;

  return 200 "APP";
}


9 nginx -t  # проверка синтаксиса
10 /etc/init.d/nginx restart  ## перестартую сервер nginx в момент рестарт если кто-то подключится может увидеть ошибку
   /etc/init.d/nginx reload   ### reload создает перезагруку создаются новые воркеры которые обрабатывают запросы, а старые убиваются 
   клиенты не отрубаются

11 curl # cat url расшифровка 
   
1 telnet sam.linux.of.by 80
Trying 185.179.83.171...
Connected to sam.linux.of.by.
Escape character is '^]'.
GET /index.html HTTP/1.0     ## два раза enter 

HTTP/1.1 200 OK         # код ответа 
Server: nginx/1.19.6    # версия сервера 
Date: Sat, 30 Jan 2021 17:52:26 GMT  # дата и время
Content-Type: text/html
Content-Length: 3                     # 3 символа передали APP
Connection: close

APPConnection closed by foreign host. # APP тут есть 


2 telnet sam.linux.of.by 80
Trying 185.179.83.171...
Connected to sam.linux.of.by.
Escape character is '^]'.
GET /index.html HTTP/1.1     # здесь уже другая версия протокола 
Host: sam.linux.of.by        # обязательно надо указать к какому виртуальному хосту надо подключиться


12 mv default.conf sam.linux.of.by.conf  # виртуальные хосты необходимо переименовывать в название сайтов который описан в них 
13 cp sam.linux.of.by.conf web.kis.im.conf

vim web.kis.im.conf

server {
  listen 80;

  server_name web.kis.im;

  return 201 "WEB";

14 Однако мы все може хранить в одном виртуальном хосте 
rm -rf web.kis.im.conf

vim sam.linux.of.by.conf # добавим еще конфиг для второго домена 
server {
  listen 80;

  server_name sam.linux.of.by;

  return 200 "APP\n";  # чтобы строки не слиплись 
}


server {
  listen 80;

  server_name web.kis.im;

  return 201 "WEB\n"; # чтобы строки не слиплись
}


15 telnet sam.linux.of.by 80

GET /index.html HTTP/1.1     # здесь уже другая версия протокола 
Host: sam.linux.of.by        # обязательно надо указать к какому виртуальному хосту надо подключиться


GET /index.html HTTP/1.1
Host: web.kis.im        # тут указываю к какому виртуальному хосту надо обратиться 

WEB

Если не валидный host то тогда запрос будет отправлен на host sam.linux.of.by

16 поменяем host разными местами 
vim sam.linux.of.by.conf

server {
  listen 80;

  server_name web.kis.im;

  return 201 "WEB\n";
}

server {
  listen 80;

  server_name sam.linux.of.by;

  return 200 "APP\n";
}

/etc/init.d/nginx reload

16.1 telnet app.kis.im 80 
GET /index.html HTTP/1.1
HOST: dsadadsadsadsad

WEB  ## будет по умолчанию кидать на первый host, указанынй в sam.linux.of.by.conf который самый вверху

16.2 настраиваем что если поступает некорректный запрос на сервер чтобы кидало виртуальный хост который расположен в самом внизу 

server {
  listen 80 default_server;    # теперь на этот host будут идти по умолчанию запросы которые не корректные независимо от его местоположения 

  server_name sam.linux.of.by;

  return 200 "APP\n";
}


17
1 curl http://sam.linux.of.by       # читаю виртуальный host на сервере 
APP

2 curl -v http://sam.linux.of.by     # покажет большие логирование 
покажет соединение с сервером, какие заголовки были отправлены на сервер 

*   Trying 185.179.83.171:80...      # покажет соединение с сервером, его ip-адрес, какие заголовки были отправлены на сервер 
* TCP_NODELAY set                    # браузер также поступает
* Connected to sam.linux.of.by (185.179.83.171) port 80 (#0)
> GET / HTTP/1.1
> Host: sam.linux.of.by
> User-Agent: curl/7.68.0
> Accept: */*

* Mark bundle as not supporting multiuse       # покажет какие header заголовки были отправлены с сервера
< HTTP/1.1 200 OK
< Server: nginx/1.19.6
< Date: Sun, 31 Jan 2021 06:41:58 GMT
< Content-Type: application/octet-stream
< Content-Length: 4
< Connection: keep-alive

3 curl -D - http://sam.linux.of.by/     # -D dump headers после второго дефиса - ничего не указано значит вывод в терминал будет 
                                         
HTTP/1.1 200 OK                    # смотрю заголовки, которые поступили от сервера 
Server: nginx/1.19.6
Date: Sun, 31 Jan 2021 06:47:44 GMT
Content-Type: application/octet-stream
Content-Length: 4
Connection: keep-alive

APP     # инфа с виртуального хоста return 

4 curl -D - -o /dev/null http://sam.linux.of.by/   # если много информациии то можно так
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current   # состояние загрузки запроса 
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0HTTP/1.1 200 OK
Server: nginx/1.19.6
Date: Sun, 31 Jan 2021 06:49:58 GMT
Content-Type: application/octet-stream
Content-Length: 4
Connection: keep-alive

100     4  100     4    0     0    222      0 --:--:-- --:--:-- --:--:--   222



5 !!curl -s -D - -o /dev/null http://sam.linux.of.by/ # -s silent убрали пораметры скорости загрузки, -D dump headers -o output /dev/null !!!   # когда многи инфы а нам надо чисто заголовки 
HTTP/1.1 200 OK
Server: nginx/1.19.6
Date: Sun, 31 Jan 2021 06:52:04 GMT
Content-Type: application/octet-stream
Content-Length: 4
Connection: keep-alive
 
самые сокращенная информация с сервера, чистый ответ от сервера 

6 curl -s -D -  http://sam.linux.of.by/     # смотрим заголовки сервера 
HTTP/1.1 200 OK
Server: nginx/1.19.6
Date: Sun, 31 Jan 2021 06:56:29 GMT
Content-Type: application/octet-stream
Content-Length: 4
Connection: keep-alive

APP

7 curl -s -D - -H 'Host: sam.linux.of.by'  http://sam.linux.of.by/  # поменял header host к серверу !!!!

HTTP/1.1 200 OK
Server: nginx/1.19.6
Date: Sun, 31 Jan 2021 07:00:13 GMT
Content-Type: application/octet-stream
Content-Length: 4
Connection: keep-alive

APP 

8 curl -v -s -D - -H 'Host: sam.linux.of.by'  http://sam.linux.of.by/
*   Trying 185.179.83.171:80...
* TCP_NODELAY set
* Connected to sam.linux.of.by (185.179.83.171) port 80 (#0)
> GET / HTTP/1.1
> Host: sam.linux.of.by            # смогу увидеть, что от нас пошел запрос Host: заголовок изменен 
> User-Agent: curl/7.68.0
> Accept: */*

9  curl -v gamma.17f2998bb08b389725208b2a43cf72f6.kis.im:8080    #обращение к конкретному порту 





=============================================================
_Задание 1_:
Установите nginx из официальных репозиториев nginx версии mainline.
Установите количество обработчиков запросов (workers) равное 4 и максимальное количество соединений для одного обработчика - 2048.
Установите максимальный размер файла, отправляемого клиентами, равным 50 Mb.
Создайте три виртуальных хоста:
alpha.{base_domain} - слушать запросы на 80 порту, должен возвращать код 201 и текст "ALPHA".
beta.{base_domain} - слушать запросы на 80 порту, по умолчанию этот сервер должен отвечать на запросы, если не указан Host, должен возвращать код 202 и текст "BETA".
gamma.{base_domain} - слушать запросы на 8080 порту, должен возвращать редирект на "https://yandex.ru" (код ответа 301).
Проверьте, что все домены возвращают необходимые значения и отправляйте задание на проверку.

1 установка 

1 echo "deb http://nginx.org/packages/mainline/ubuntu `lsb_release -cs` nginx" \
    | sudo tee /etc/apt/sources.list.d/nginx.list

2 curl -fsSL https://nginx.org/keys/nginx_signing.key | sudo apt-key add -

3 sudo apt-key fingerprint ABF5BD827BD9BF62

4 sudo apt update
sudo apt install nginx 
===============================

user  nginx;
worker_processes  4;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;


events {
    worker_connections  2048;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    client_max_body_size 50m;
    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;

    include /etc/nginx/conf.d/*.conf;

============================
2

server {
  listen 80;

  server_name alpha.17f2998bb08b389725208b2a43cf72f6.kis.im;

  return 201 "ALPHA\n";
}

server {
  listen 80 default_server;

  server_name beta.17f2998bb08b389725208b2a43cf72f6.kis.im;

  return 202 "BETA\n";
}

server {
  listen 8080;

  server_name gamma.17f2998bb08b389725208b2a43cf72f6.kis.im;

  return 301 https://yandex.ru;
}


Server IP: 157.230.113.10, root password: bympwgzlmpba, base_domain: 17f2998bb08b389725208b2a43cf72f6.kis.im

Здравствуйте.

Не получается сделать последние задание, не могу понять что делаю не так. 

server {
  listen 8080;

  server_name gamma.17f2998bb08b389725208b2a43cf72f6.kis.im;

  return 301 https://yandex.ru;
}

============================================================================================================================
_NGX-02: Настройка Locations в nginx_
#################################################
Итого
1 location можно прописать путь к примеру linux.of.by/admin  что нужно возвращать если пользователь введет такой url
2 curl -D - -s http://app.kis.im/    # дампим заголовки сервера 
200 ROOT      # ответ 
2.1  curl -D - -s http://app.kis.im/non/existing/document   # по конкретному location 

3 /etc/init.d/nginx reload 

4 https://regex101.com/
\.php
testing string 
/index.php

####################################################

1 curl http://app.kis.im/path/to/document/index.php?arg1=data1&arg2=data2
schema://user:password@app.kis.im:8080/path/to/document/index.php?arg1=data1&arg2=data2 # ?arg1 аргумент

2 разные пути:
api -> backend1/backend, /static -> /var/www/html,  # у каждого приложения свой каталог 

3 server {
  listen 80 default_server;

  server_name app.kis.im;

  location / {            # запрос всех документов в корне то 200 root
    return 200 "ROOT\n";
  }

  location /admin {       # запрос в location admin то return 200 admin 
    return 200 "Admin\n"; 
  }
}

3.1 /etc/init.d/nginx reload 

3.2 curl -D - -s http://app.kis.im/    # дампим заголовки сервера 
200
ROOT      # ответ 

3.3 curl -D - -s http://app.kis.im/non/existing/document 
200
ROOT  # ответ опять такой же так как nginx не найдет такого location с таким путем

3.4. curl -D - -s http://app.kis.im/admin
200
Admin # вывод 

curl -D - -s http://app.kis.im/admin/non-existing/document 
200
Admin # вывод , потому что запрос приближен к location admin поэтому и возвращает 200 Admin
###########################################################################
4 Пример
location /admin {        
    return 200 "Admin\n"; 

location /admin/test {        
    return 200 "Admin Test\n"; 

location /admin/test/data {
  return 200 "Admin Test DATA\n";   
}

location /data/ {
  return 200 "DATA\n";   
}

4.1 curl -D - -s http://app.kis.im/non-existing # вернется root так как такого location у нас нету, единственное что совпадет это / самый точный location 

200 root 
Так как 
 location / {            # запрос всех документов в корне то 200 root
    return 200 "ROOT\n";

4.2 curl -D - -s http://app.kis.im/admin/non-existing  # вернет admin так как у нас совпадает хотя бы admin но нет non-existing
location /admin {        
    return 200 "Admin\n"; 

4.3 curl -D - -s http://app.kis.im/admin/test/non-existing # вернет Admin Test так как у нас есть похожий location
location /admin/test {        
    return 200 "Admin Test\n";

Чем больше похож запрос со стороны браузера на location тем он будет больше совпадать с ответом

5 Логика location 
location = /admin/123.html {
  return 204 "123.html\n";
}

nginx -t 
 /etc/init.d/nginx reload 
5.1 curl -D - -s http://app.kis.im/admin/123.html    #204 так как полностью совпадет с нашим location выше 
вернет код ответа 204 
как правило сервер настраивается так:
location = /   # направим на корень 

https://regex101.com/
\.php
testing string 
/index.php

6 location ~ \.HtMl {       # тильда регистро зависимая и будет искать ровно такое же соотвествие  строго по такому loaction
  return 200 "HtMl"
}
/etc/init.d/nginx reload

curl -D - -s http://app.kis.im/admin/123.HtMl
HtMl  # вернет нам  так запрос строго как наш location \.HtMl

curl -D - -s http://app.kis.im/admin/123.html 
# 204 код ответа вернет нам 




