Обратный проксисервер один входи а направить запросы можно на разные backend

ГЛАВА 55 NGINX
А Apache есть модуль php mod_php который встраивается в каждый процесс, используется как и при отдаче php скрипта так css, изображения, что создает более повышенную нагрузку на сервер, сам по себе apache потребляет больше всего оперативной памяти.


1 Установка nginx
sudo apt-get update # обновление базы пакетов
sudo apt-get upgrade ## обновление системы
sudo apt-get install nginx ##
2 Управление сервером
sudo service nginx start ## стартую
sudo service nginx stop ###  остановка сервера
sudo service nginx restart  ## перезапуска сервера
sudo service nginx reload ###перезагрузка конфигов мягко, без перезапуска сервера
ps aux | grep nginx ## убедиться что процессы сервера загружены
www-data и root
3 Конфигурационные файлы
3.1 /etc/nginx ## здесь все находятся
секция {
<директива> <значение>; ## обязательно ;
}



Секции задают разный уровень действия директив: весь сервер,виртуальный хост (отдельный сайт), папка, файл с определенным расширением
3.2 /etc/nginx/nginx.conf
user www-data;  ## глобальная секция
worker_processes 4;
pid /run/nginx.pid;

events {
   worker_connections 1024;
}
http { ### секция , ниже директивы
sendfile on;
tcp_nopush on;
tcp_nodelay on;
keepalive_timeout 65;
include /etc/nginx/mime.types; ### подключаю дополнительные конфигурационные файлы тут про типы файлов
default_tupe application/octet-stream
access_log /var/log/nginx/access.log;
error_log /var/log/nginx/error.log;
gzip on;
gzip_disable "msie6";
include /etc/nginx/conf.d/*.conf;
include /etc/nginx/sites-enabled/*; ### подключаю другие конфигурационные файлы
}

user, worker_processes , pid #### глобальные секции
include ; ### подключаю другие конфигурационные файлы

user ##пользователь и группа от имени которых запускается процессы nginx, в ubuntu для этих в ubuntu пользователь www-data, если пользователь и группа разные, то указывают:
user igor www-data
 worker_processes ## кол-во процессов обрабатывающих соединеие со стороны клиента, лучше выставлять значение, равное количество ядер
pid ## путь к файлу в котором хранится индетификатор главного процесса
woker_connections ## директива задает максимальное количество соединений для рабочего процесса
 worker_processes woker_connections ### максимальное количество одновременных соединений nginx равно их произведению 

3.3. секция http и ее основные директивы
client_max_body_size ### максимальный размер тела запроса клиента. В случае превышения nginx выдает HTTP код ответа "413 Too large", ## ставь поболее иначе 413 ошибка будет
client_max_body_size 32m; ## как пример
default_type ## MME тип по умолчанию если сервер не может определить  его используя секцию type 
keepalive_timeout ## определяет сколько времени соединение типа keep alive  может оставаться открытым задается в секундах
aio ### разрешает использование асинхронного файлового ввода/вывыода 
sendfile ### разрешает использовать системный вызов sendfile для копирования из одного файлового дескриптора в другой
gzip ### on off разрешает или запрещает сжатие ответа методом gzip
gzip_disable ### запрещает gzip сжатие для запросов с user-agent совпадающих с регулярными выражениями заданным директивой
limit_rate ## ограничивает  скорость передачи ответа клиенту в байтах в секунду значение 0 отключает ограничение
tcp_delay ### on или off Запрещает или разрешает использование параметра TCP_NODELAY для соединения типа keep_alive
tcp_nopush ## учитывается только при использовании директивы sendfile разрешая nginx  оправлять http-заголовки одним пакетом а также передавать файл полным пакетами

include /etc/nginx/mime.types; ### подключаю дополнительные конфигурационные файлы
default_tupe application/octet-stream

mime.types
types { ### различные форматы
 text/html       html htm shtml;
text/css           css;
text/xml        xml rss;
image/gif      gif;
image/jpeg        js;
.... # и другие
}
Включается в секцию htttp  следующим образом:
include /etc/nginx/mime.types; 
default_type application/octet-stream; #### если не найдено сопоставление по умолчанию в секции types То ищется таким образом

4 Иерархия секций

Директивы:
Location ## изначально запрос поступает сюда
http влияет на весь сервер
server отвечает за виртуальный хост
Location за папки и файлы в рамках виртуального хоста

5 Виртуальные хосты
Один сервер может обслуживать несколько сайтов. Клиенты которые отправляют Http заголовок, host, чтобы сервер  мог  определить каком из сайтов адресован Http запрос. Набор директив, которые обслуживают такой отдельный сайт называется виртуальным хостом.
server { ## секция
 listen  80; ## слушаем порт 80
server_name example.org www,example.org; ##домен
....
}
server { ## секция
 listen  80;
server_name example.net www.example.net;
....
}
server { ## секция
 listen  80;
server_name example.com www.example.com;
....
}
server_name example.com *.example.com; ## можно делать и так сразу все домены и поддомены

5.1
server {
listen 192.168.0.1:80; ### можно указывать ip адрес сервера с портом
server_name example.com www.example.com;
root /var/lib/www.example.org/www ### местоположение файлов сайта
index index.html; ### прописываем индексный файл 
} 

5.2
server {
error_page 404 /404.html; ## коды ошибок можно указать
error_page 500 /500.html;

5.3 пример виртуального хоста, файл находится sites-available/example.com

server { ## секция
listen  80;
root /var/www/example.com/www;
access_log /var/www/example.com/log/access.log;
error_log /var/www/example.com/log/error_log;
index index.html;
error_page 404 /404.html; ## коды ошибок можно указать
error_page 500 /500.html;
server_name example.com www.example.com;
client_max_body_size 32m; ###максимальный размер тела запроса клиента
}

5.4 Местоположение файлов виртуального хоста
/etc/nginx/sites-available ### Местоположение файлов виртуального хостов вся инфа о наших сайтов все что есть
/etc/nginx/sites-enabled ### чтобы активировать конфигурационный файл необходимо сделать символическую ссылку все что отдается

sudo ln -s /etc/nginx/sites-available/example.com /etc/nginx/sites-enabled/example.com ## активирую виртуальный хост конкретного домена example.com
мы показываем где находятся файлы потом просто указываем куда перенести символьные ссылки

Если я нахожусь в папке  /etc/nginx/sites-enabled то тогда:
cd /etc/nginx/sites-enabled
sudo ln -s /etc/nginx/sites-available/example.com

6 Журнальные файлы 
Если ошибка смотри файл виртуального хоста где находятся error_log (access_log) И там смотри что происходит
error_log ### директива размещается в глобальной секции там где user www-data; в самом вверху
access_log  ###  директива размещается на уровне секции  server или location
если хост вообще не стартует  то искать причину нужно в глобальному журнальном файле который прописан в виртуальном хосте
log_format ## как будет отображаться сам Log
формат строки определяется директивой log format пример:
http ## секция тут надо прописывать log_format
log_format '$remote_adr|$time_local|$request|$status|$http_user_agent';
все это серверные переменные ознакомится с основными ты можешь на странице 1032

6.1 Если я хочу log_format отдельный для конкретного виртуального хоста, то так:
access_log /path/to/access.log '$time_local | $request | $status | $http_user_agent';


7 Местоположения location
Позволяет к примеру кэшировать статику, а php не трогать
секция location   файл templates/default

#Типовые настройки общие для всех доменов
index index.php index.html;
#Максимальный процессов HTTP-документов
client_max_body_size 32m;

#Закрываем доступ ка файлам .htaccess и htpassword
location ~/\.ht {
 deny all;
}
## не помещаем в журнальный файл обращения к favicon.ico
location = /favicon.ico {
 log_not_found off;
access_log off;
}
# Не помещаем в журнальный файл обращения к robots.txt если его нету
location = /robors.txt {
allow all;
log_not_found off;
access_log;
}
# Не помещаем в журнальный файл обращения к файлам,
# начинающим с /apple-touch
location ~  /apple-touch~ {
 log_not_found off;
access_log off;
}
= буквальное значение 
~ сопоставление с регулярными выражениям с учетом регистра
~* сопоставление с регулярным выражением без учета регистра
^~ в случае нахождения данной комбинации поиск прекращается

Подключение вышеуказанной директив templates/default к  виртуальному хосту
захожу в sites-available/example.net
server {
...........
include /etc/nginx/templates/default; ## 
 
}
8 Подключение php fpm c локальной машины через порт 
sites-available/example.net
server{
.....
location @php {
   proxy_pass http://localhost:9000;
   include fastcgi_params;
   fastcgi_index index php;
}

8.1 если nginx php fpm находится на одном сервере то подключаем через сокет
sites-available/example.net
server {
.........
location ~ \.php$ {
  try_files $uri = 404;
  fastcgi_pass  unix:/var/run/php5-fpm.sock;
  fastcgi_index index.php;
  include fastcgi_params;
}
также можно  создать отдельный файл  etc/nginx/templates/php и подключать к виртуальному хосту нужный тебе отдельный файл
sites-available/example.net
server{
.......
include /etc/nginx/templates/php
}

ГЛАВА 56 PHP FPM
PHP FPM  менеджеров процессов fastcgi позволяет организовать работу php процессов обрабатывающих запросы web сервера например nginx
1 Установка PHP FPM
sudo apt-get update # обновление базы пакетов
sudo apt-get upgrade ## обновление системы
sudo apt-get install php7-fpm ##
2 Управление PHP FPM
sudo service php7-fpm  start ## стартую
sudo service php7-fpm stop ###  остановка сервера
sudo service php7-fpm restart  ## перезапуска сервера
sudo service php7-fpm reload ###перезагрузка конфигов мягко, без перезапуска сервера
ps aux | grep php-fpm ## убедиться что php-fpm загружены ТАКЖЕ я могу посмотреть какой домен он обслуживает
3 Конфигурационные файлы
местоположения
/etc/php7/cli/php.ini # конфигурациионный файл консольной утилиты php
/etc/php7/apache2/php.ini ## конфигурационный файл  для модуля Php На apache
/etc/php7/fpm/php.in ## конфигурационный файл php-fpm, используемый сервером Nginx
phpinfo() ## позволит узнать его местоположение или php -i
3.1 файл php-fpm.conf здесь глобальные настройки php-fpm
[global]
pid = /var/run/php7-fpm.pid ## путь к файлу где хранится главные индетификатор процесса php-fpm
error_log= /var/log/php7-fpm.log ### здесь журнал ошибок можно смотреть 
emergency_restart_threshold = 10  ### макс дочерних процессов которые могут завершится со сбоем
emergency_restart_interval = 1m ### директива которая определяет в течении времени которого будет мягкая перезагрузка PHP FPM  s секунды, m минуты, h часы, d дни
include = /etc/php7/fpm/pool.d/*.conf ### добавляю дополнительный конфигурациионный файл *.conf ## все файлы в формате .conf

4  pool.d/example.com.conf
user group ## пользователь и группа которые запускают php fpm
listen = 127.0.0.1:9000 ### можно задать обмен php fpm с другими серверами
если php fpm обслуживает сразу несколько разных сайтов то можно для каждого сервиса задать отдельный сокет(так как один порт использут один сервис)
listen = /var/www/$pool/fastcgi.sock
listen.owner listen.group ## задаем владельца и группу для файла сокета
pm определяет каким образом создаются процессы Php fpm
static фиксированные количество рабочих процессов определяемое директивой pm.max_children
dynamic динамическое количество рабочих процессов
ondemand # изначально процессы отсуствуют
если выбрал dynamic:
pm.max_children  максимально возможное количество рабочих процессов  создаваемых php fpm
pm.start_servers количество рабочих процессов которые создаются при старте 
pm.min_spare_servers ## минимальное количество не занятых процессов и готовых к работе в любую минуту
pm.max_spare_servers ## ;желатеьно максимальное количество не занятых процессов и готовых к работе в любую минутy

security.limit_extensions Задает список допустимых расширений
php_admin_value  устанавливает строковый параметр php ini
php_admin_flag  устанавливает логическое параметры php ini Т.е. те которые  принимают значения on или off
 
5 Подключение к nginx php fpm к разным хостам

1  upstream exmple_com{
server unix:/var/www/exmple.com/fastgi.sock fail_timeout:
}
server { ## секция
listen  80;
root /var/www/example.com/www;
access_log /var/www/example.com/log/access.log;
error_log /var/www/example.com/log/error_log;
index index.html;
error_page 404 /404.html; ## коды ошибок можно указать
error_page 500 /500.html;
server_name example.com www.example.com;
client_max_body_size 32m; ###максимальный размер тела запроса клиента

locatin ~* \.php$ {
   fastcgi_pass example.com;
   include fastgi_params;
  fastcgi_index index.php;
}

2 upstream exmple_net{
server unix:/var/www/exmple.net/fastgi.sock fail_timeout:
}
server { ## секция
listen  80;
root /var/www/example.net/www;
access_log /var/www/example.net/log/access.log;




